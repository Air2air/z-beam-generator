#!/usr/bin/env python3
"""
Cleanup Redundant Fields Script

Removes fields from materials.yaml that are redundantly generated by the frontmatter generator.
This reduces file size and eliminates data duplication while keeping essential source data.
"""

import yaml
from typing import Dict, Any

# Fields to remove that are generated by frontmatter
REDUNDANT_FIELDS = {
    # Core metadata (generated by frontmatter)
    'name',
    'formula', 
    'symbol',
    'complexity',
    'difficulty_score',
    
    # Applications (generated dynamically)
    'applications',
    
    # Complete machine settings section (generated with ranges and units)
    'machineSettings',
    
    # Compatibility section (generated dynamically)
    'compatibility',
    
    # Density (generated as materialProperties with proper units/ranges)
    'density'
}

def clean_material_entry(entry: Dict[str, Any], material_name: str = "unknown") -> Dict[str, Any]:
    """Clean a single material entry by removing redundant fields"""
    cleaned = {}
    removed_fields = []
    
    for key, value in entry.items():
        if key in REDUNDANT_FIELDS:
            removed_fields.append(key)
        else:
            cleaned[key] = value
    
    if removed_fields:
        print(f"  Removed from {material_name}: {', '.join(removed_fields)}")
    
    return cleaned

def cleanup_materials_yaml(input_file: str, output_file: str) -> Dict[str, int]:
    """Clean up the materials.yaml file and return statistics"""
    print(f"🧹 Cleaning up {input_file}...")
    
    # Load the YAML
    with open(input_file, 'r') as f:
        data = yaml.safe_load(f)
    
    stats = {
        'total_entries': 0,
        'cleaned_entries': 0,
        'total_fields_removed': 0,
        'categories_processed': 0
    }
    
    # Clean up materials section
    if 'materials' in data:
        print("\n📋 Processing materials section...")
        
        for category_name, category_data in data['materials'].items():
            stats['categories_processed'] += 1
            print(f"\n🏷️  Category: {category_name}")
            
            if isinstance(category_data, dict) and 'items' in category_data:
                original_count = len(category_data['items'])
                cleaned_items = []
                
                for i, item in enumerate(category_data['items']):
                    stats['total_entries'] += 1
                    if isinstance(item, dict):
                        material_name = item.get('name', f"{category_name}_{i}")
                        original_fields = len(item)
                        cleaned_item = clean_material_entry(item, material_name)
                        cleaned_items.append(cleaned_item)
                        
                        if len(cleaned_item) < original_fields:
                            stats['cleaned_entries'] += 1
                            stats['total_fields_removed'] += original_fields - len(cleaned_item)
                    else:
                        cleaned_items.append(item)
                
                data['materials'][category_name]['items'] = cleaned_items
                print(f"  ✅ Processed {original_count} items in {category_name}")
    
    # Clean up any direct material entries (backup cleanup)
    materials_to_remove = []
    if isinstance(data, dict):
        for key in data.keys():
            if key in REDUNDANT_FIELDS:
                materials_to_remove.append(key)
    
    for key in materials_to_remove:
        del data[key]
        stats['total_fields_removed'] += 1
        print(f"  Removed top-level redundant field: {key}")
    
    # Write cleaned data
    with open(output_file, 'w') as f:
        yaml.dump(data, f, default_flow_style=False, sort_keys=False, allow_unicode=True, width=1000)
    
    return stats

def main():
    print("🚀 MATERIALS.YAML REDUNDANT FIELDS CLEANUP")
    print("=" * 55)
    print("Removing fields that are generated by frontmatter...")
    print(f"Target fields: {', '.join(sorted(REDUNDANT_FIELDS))}")
    print()
    
    # Cleanup the file
    stats = cleanup_materials_yaml('data/materials.yaml', 'data/materials.yaml')
    
    # Print statistics
    print("\n📊 CLEANUP STATISTICS")
    print("=" * 25)
    print(f"Categories processed: {stats['categories_processed']}")
    print(f"Total entries examined: {stats['total_entries']}")
    print(f"Entries with fields removed: {stats['cleaned_entries']}")
    print(f"Total fields removed: {stats['total_fields_removed']}")
    
    # File size comparison
    import os
    original_size = os.path.getsize('data/materials_before_cleanup.yaml')
    new_size = os.path.getsize('data/materials.yaml')
    reduction = original_size - new_size
    reduction_percent = (reduction / original_size) * 100
    
    print("\n💾 FILE SIZE REDUCTION")
    print("=" * 22)
    print(f"Original size: {original_size:,} bytes")
    print(f"New size: {new_size:,} bytes")
    print(f"Reduction: {reduction:,} bytes ({reduction_percent:.1f}%)")
    
    print(f"\n✅ Cleanup complete! Materials.yaml is now {reduction_percent:.1f}% smaller.")
    print("🎯 File now contains only source data needed for frontmatter generation.")

if __name__ == '__main__':
    main()