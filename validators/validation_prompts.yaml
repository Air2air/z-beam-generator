# Validation Prompting System for Claude
# This provides detailed validation criteria and error analysis prompts for each component

component_validation_prompts:
  caption:
    requirements: |
      STRICT REQUIREMENTS for captions:
      - EXACTLY two lines, no more, no less
      - Line 1: Material name with chemical formula + microscopic surface analysis + contamination details
      - Line 2: "After laser cleaning at [wavelength], [power], [pulse duration] and [spot size]" + results
      - Must include specific technical parameters (wavelength in nm, power in W, pulse duration in ns/ps, spot size in mm/μm)
      - Use scientific terminology appropriate for technical documentation
      - No markdown formatting, no code blocks, raw text only
    
    error_analysis_prompt: |
      Analyze this caption content for compliance with strict 2-line format:
      
      VALIDATION CHECKLIST:
      1. Line count: Is it exactly 2 lines? (Count \n characters)
      2. Line 1 structure: Does it contain [Material + Formula] + "microscopic surface analysis" + contamination details?
      3. Line 2 structure: Does it start with "After laser cleaning at" + technical parameters + results?
      4. Technical specificity: Are wavelength (nm), power (W), pulse duration (ns/ps), spot size (mm/μm) included?
      5. Scientific terminology: Is language appropriate for technical documentation?
      6. Format compliance: No markdown, no code blocks, raw text only?
      
      Provide specific details on which requirements are violated and exact fixes needed.
    
    common_errors:
      - "Single line instead of two lines"
      - "More than two lines (paragraphs instead of lines)"
      - "Missing technical specifications (wavelength, power, pulse duration, spot size)"
      - "Vague terminology instead of scientific precision"
      - "Missing chemical formula in material name"
      - "Generic 'laser cleaning' instead of specific parameters"
      - "Markdown formatting or code block wrappers"

  frontmatter:
    requirements: |
      STRICT REQUIREMENTS for frontmatter:
      - Valid YAML with --- delimiters at start and end
      - ALL required schema fields populated with real data (no TBD, no placeholders)
      - Required fields: name, description, author, keywords, category, chemicalProperties, properties, composition, compatibility, regulatoryStandards, images
      - chemicalProperties: symbol, formula, materialType with exact values from context
      - properties: density (g/cm³), meltingPoint (°C), thermalConductivity (W/m·K) with specific numbers
      - images: hero and closeup objects with alt and url fields
      - No generic or placeholder values allowed
    
    error_analysis_prompt: |
      Analyze this frontmatter for schema compliance and data completeness:
      
      VALIDATION CHECKLIST:
      1. YAML structure: Valid syntax with --- delimiters?
      2. Required fields presence: Are ALL schema-required fields present? (name, description, author, keywords, category, chemicalProperties, properties, composition, compatibility, regulatoryStandards, images)
      3. Data quality: Are values specific and realistic (no TBD, no "placeholder", no "{value}")?
      4. Chemical properties: Do symbol, formula, materialType match the material context?
      5. Physical properties: Are density, meltingPoint, thermalConductivity specific numbers with units?
      6. Arrays populated: Are composition, compatibility, regulatoryStandards arrays (even if empty [])?
      7. Images structure: Do hero and closeup have alt and url fields?
      
      Identify missing fields and placeholder values requiring replacement with real data.
    
    common_errors:
      - "Missing required fields: [list specific fields]"
      - "TBD values in properties section"
      - "Placeholder chemical formulas instead of real formulas"
      - "Generic density/melting point values"
      - "Missing chemicalProperties object"
      - "Empty or missing images structure"
      - "YAML syntax errors (indentation, colons, quotes)"

  jsonld:
    requirements: |
      STRICT REQUIREMENTS for JSON-LD:
      - YAML format output (NOT JSON format with curly braces)
      - Required fields: headline, description, keywords (array), articleBody
      - Schema.org compliance for structured data
      - No JSON syntax (no {}, no quoted keys)
      - No code block markers (no ```)
      - Keywords as YAML array with - prefix
      - Comprehensive articleBody with technical content
    
    error_analysis_prompt: |
      Analyze this JSON-LD content for format and schema compliance:
      
      VALIDATION CHECKLIST:
      1. Format type: Is it YAML format (NOT JSON with {})?
      2. Required fields: Are headline, description, keywords, articleBody present?
      3. Keywords structure: Is keywords a YAML array with - prefix (not comma-separated string)?
      4. Schema compliance: Does content follow Schema.org structured data principles?
      5. Code blocks: Are there any ``` markers that should be removed?
      6. JSON syntax: Are there any {}, quoted keys, or JSON formatting?
      7. Content quality: Is articleBody comprehensive and technical?
      
      Specify exact format violations and required structural changes.
    
    common_errors:
      - "JSON format instead of YAML (has {} or quoted keys)"
      - "Code block wrappers (```yaml or ```json)"
      - "Missing required Schema.org fields"
      - "Keywords as string instead of YAML array"
      - "Insufficient articleBody content"
      - "No JSON-LD structure markers (@context, @type missing if JSON format expected)"

  metatags:
    requirements: |
      STRICT REQUIREMENTS for metatags:
      - meta_title: 50-60 characters, SEO-optimized, includes material name + "laser cleaning"
      - meta_description: 150-160 characters, technical details about laser parameters and applications
      - meta_keywords: 10-15 terms, comma-separated, includes material, laser-cleaning, technical terms
      - Focus on laser wavelengths, material properties, industrial applications, safety aspects
      - Character limits are strict - count characters precisely
    
    error_analysis_prompt: |
      Analyze this metatags content for SEO optimization and character limits:
      
      VALIDATION CHECKLIST:
      1. Fields presence: Are meta_title, meta_description, meta_keywords all present?
      2. Title length: Is meta_title 50-60 characters? (count exactly)
      3. Description length: Is meta_description 150-160 characters? (count exactly)
      4. Keywords count: Are there 10-15 keywords, comma-separated?
      5. SEO optimization: Does title include material name + "laser cleaning"?
      6. Technical focus: Does description mention laser parameters and applications?
      7. Keyword relevance: Do keywords include material, laser-cleaning, technical terms?
      
      Provide exact character counts and specific content improvements needed.
    
    common_errors:
      - "meta_title too short (<50 chars) or too long (>60 chars)"
      - "meta_description outside 150-160 character range"
      - "Insufficient keywords (<10) or too many (>15)"
      - "Generic descriptions lacking technical laser parameters"
      - "Missing material-specific terminology in keywords"
      - "Poor SEO optimization (missing key terms)"

  propertiestable:
    requirements: |
      STRICT REQUIREMENTS for properties table:
      - Comprehensive technical data table with NO TBD values
      - Physical properties: density (g/cm³), melting point (°C), thermal conductivity (W/m·K) with exact values
      - Chemical properties: composition percentages, chemical formulas, purity levels (99.x%)
      - Laser parameters: wavelengths in nm, power ranges in W, pulse durations in ns, fluence in J/cm²
      - Processing data: cleaning rates, temperature ranges, measured outcomes with units
      - All values must be specific and measurable (no placeholders)
    
    error_analysis_prompt: |
      Analyze this properties table for technical completeness and data specificity:
      
      VALIDATION CHECKLIST:
      1. Placeholder content: Are there any TBD, "placeholder", or "{value}" entries?
      2. Physical properties: Are density, melting point, thermal conductivity specific numbers with units?
      3. Chemical data: Are composition percentages and purity levels precise (99.x%)?
      4. Laser parameters: Are wavelengths (nm), power (W), pulse duration (ns), fluence (J/cm²) specified?
      5. Processing data: Are cleaning rates, temperatures, outcomes quantifiable with units?
      6. Table structure: Is content organized in proper table format?
      7. Data realism: Are values realistic for the specific material?
      
      Identify all placeholder values and specify realistic replacements with proper units.
    
    common_errors:
      - "TBD values throughout the table"
      - "Generic density/melting point without specific numbers"
      - "Missing laser parameter specifications"
      - "Vague processing data without quantifiable results"
      - "No units specified for physical properties"
      - "Unrealistic or impossible values for the material"

error_severity_levels:
  critical:
    description: "Validation failures that prevent component functionality"
    examples:
      - "Missing required schema fields"
      - "Invalid file format or syntax errors"
      - "No content or empty files"
    action_required: "Immediate fix required before validation can pass"
  
  major:
    description: "Content quality issues that significantly impact usability"
    examples:
      - "TBD or placeholder values in content"
      - "Wrong format (JSON instead of YAML)"
      - "Character limit violations in metatags"
    action_required: "Fix required for production quality"
  
  minor:
    description: "Style or optimization issues that don't break functionality"
    examples:
      - "Suboptimal SEO terminology"
      - "Minor formatting inconsistencies"
      - "Missing optional enhancements"
    action_required: "Recommended improvements"

validation_workflow:
  phase1_structural_analysis:
    prompt: |
      First, analyze the file structure and basic syntax:
      1. Does the file exist and is it readable?
      2. Is the basic format correct (YAML frontmatter, markdown, etc.)?
      3. Are required structural elements present?
      4. Are there any syntax errors that prevent parsing?
      
      Report any CRITICAL issues that must be fixed before content analysis.
  
  phase2_content_validation:
    prompt: |
      Next, validate content against component-specific requirements:
      1. Are all required fields/elements present?
      2. Is content specific and realistic (no TBD/placeholders)?
      3. Do values meet technical specifications and limits?
      4. Is terminology appropriate and scientifically accurate?
      
      Report MAJOR issues affecting content quality and usability.
  
  phase3_optimization_review:
    prompt: |
      Finally, review for optimization and best practices:
      1. Is content optimized for its intended use (SEO, readability)?
      2. Are there opportunities for technical enhancement?
      3. Does content follow established style guidelines?
      4. Could any aspects be improved for better user experience?
      
      Report MINOR issues and improvement recommendations.

claude_validation_instructions:
  general_approach: |
    When validating content, follow this systematic approach:
    1. Use the component-specific requirements as your validation criteria
    2. Apply the error analysis prompt to identify specific violations
    3. Classify issues by severity level (critical/major/minor)
    4. Provide specific, actionable fix recommendations
    5. Reference exact line numbers and field names when possible
    6. Include character counts for length-sensitive fields
    7. Suggest realistic replacement values for placeholders
  
  error_reporting_format: |
    For each validation error found, report:
    - Component: [component_name]
    - Severity: [critical/major/minor]
    - Issue: [specific description of what's wrong]
    - Location: [file path, line number, field name if applicable]
    - Expected: [what the content should be]
    - Fix: [specific action to resolve the issue]
    - Example: [if helpful, provide a correct example]
  
  fix_prioritization: |
    Prioritize fixes in this order:
    1. CRITICAL: Structural/syntax errors preventing basic functionality
    2. MAJOR: Content quality issues affecting usability/production readiness
    3. MINOR: Optimization and enhancement opportunities
    
    Focus on critical and major issues first, address minor issues if time permits.
