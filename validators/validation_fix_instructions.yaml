# Strategic Validation Fix Guidance for Claude
# This document provides systematic approaches for analyzing and fixing component validation failures
# Focus: Guide Claude's decision-making process for effective, targeted fixes

decision_framework:
  step1_diagnosis:
    question: "What type of validation failure occurred?"
    analysis_approach:
      - "Read validation error messages to identify specific failure patterns"
      - "Check if file exists, has content, or is completely missing"
      - "Determine if it's a schema issue, format issue, or content quality issue"
      - "Look for placeholder content (TBD, [brackets], TODO) that needs replacement"
    
  step2_root_cause:
    question: "Why did this component fail validation?"
    investigation_strategy:
      - "Compare failed content against working example in validators/examples/{component}.md"
      - "Check if YAML frontmatter structure matches required schema"
      - "Verify component follows proper format (2-line caption, YAML jsonld, etc.)"
      - "Identify missing required fields vs format violations vs content placeholders"
    
  step3_fix_strategy:
    question: "What's the most effective fix approach?"
    strategy_selection:
      schema_missing: "Use validators/examples/{component}.md as reference to add missing fields"
      format_wrong: "Apply validators/templates/{component}-template.md with material substitution"
      content_placeholder: "Replace TBD/placeholder content with realistic technical data"
      file_missing: "Generate new component using template + material-specific data"

fix_approaches:
  schema_compliance_fix:
    when: "Missing required field errors, schema validation failed"
    strategy: "Reference-based field addition"
    steps:
      1. "Open validators/examples/{component}.md to see required structure"
      2. "Identify which required fields are missing from current content"
      3. "Add missing fields using same data types and structure as example"
      4. "Populate with material-specific data, not generic placeholders"
    
    common_missing_fields:
      frontmatter: ["name", "applications", "technicalSpecifications", "subject", "article_type"]
      metatags: ["title", "meta_tags", "opengraph"]
      jsonld: ["headline", "description", "keywords", "articleBody"]
      caption: "N/A - format issue, not schema"
      content: "N/A - content structure issue"
  
  format_structure_fix:
    when: "YAML syntax errors, wrong file format, structure violations"
    strategy: "Structural formatting only - content should be completely open and varied"
    steps:
      1. "Identify the specific format requirement from validation error"
      2. "Use validators/templates/{component}-template.md for basic structure only"
      3. "Apply proper YAML indentation, array syntax, object nesting"
      4. "Remove any markdown code block wrappers (```yaml, ```markdown)"
      5. "Allow complete content creativity within proper structure"
      6. "Do NOT force specific content patterns from examples"
    
    format_requirements:
      metatags: "YAML frontmatter structure with basic fields - content can vary widely"
      frontmatter: "Proper YAML syntax - but content should be open and creative"
      jsonld: "Valid YAML structure - content and values should be unrestricted"
      caption: "Basic markdown formatting - content should be completely open"
      content: "Standard markdown structure - content should vary and be creative"
  
  content_quality_fix:
    when: "Low quality scores, placeholder content, insufficient detail"
    strategy: "Minimal placeholder replacement - preserve content creativity"
    steps:
      1. "Identify only critical placeholder content (TBD, [material], {value}, TODO)"
      2. "Replace placeholders with basic material-specific data"
      3. "Allow content to be creative and varied within component structure"
      4. "Do NOT enforce specific content patterns or templates"
    
    content_standards:
      caption: "Basic structure preserved - content should be completely open"
      jsonld: "Valid structure maintained - content can vary widely"
      metatags: "Proper YAML format - values should be unrestricted"
      frontmatter: "Valid YAML structure - content should be creative and varied"
      content: "Standard markdown - content should be completely open"

material_data_strategy:
  contextual_replacement:
    material_name: "Replace [material], {material}, stoneware, alumina with actual material"
    technical_specs: "Use realistic values for density, melting point, wavelengths"
    applications: "Material-appropriate industrial uses and processing methods"
    safety_data: "Relevant laser parameters and safety considerations"
  
  avoid_generic_data:
    - "Don't use 'TBD' or 'placeholder' values"
    - "Don't copy example data exactly - adapt to material"
    - "Don't use generic '[property1], [property2]' patterns"
    - "Don't leave bracket placeholders like [value] or {setting}"

validation_integration:
  enhanced_validator_usage:
    - "The CentralizedValidator now compares against validators/examples/ formats"
    - "Validation errors are specific - use them to guide exact fixes needed"
    - "Template system provides base structure for autonomous fixing"
    - "Examples show proper working format for each component type"
  
  fix_verification:
    - "After fixing, content should match example format requirements"
    - "Re-validation should show ComponentStatus.SUCCESS"
    - "No placeholder content should remain in fixed components"
    - "YAML structure should be valid and complete"

claude_decision_prompts:
  component_failure_analysis: |
    When a component fails validation:
    1. What specific error messages indicate the type of failure?
    2. Does the component file exist and have content?
    3. What format requirements does this component type have?
    4. What does the working example show for proper structure?
    5. What material-specific data needs to replace placeholders?
  
  fix_strategy_selection: |
    Choose fix approach based on:
    - Schema errors → Use examples for required field structure
    - Format errors → Use templates for proper syntax/structure  
    - Content errors → Replace placeholders with technical data
    - Missing files → Generate from template with material context
  
  quality_verification: |
    Verify fix effectiveness by:
    - Does content match example format requirements?
    - Are all required fields present with proper data types?
    - Is placeholder content replaced with realistic technical data?
    - Does YAML parse correctly without syntax errors?
    - Are component-specific format rules followed (2-line caption, etc.)?

effectiveness_guidelines:
  targeted_fixes:
    - "Fix only what validation identified as broken"
    - "Use existing working code patterns and utilities"
    - "Make minimal changes that address root cause"
    - "Preserve valid content while fixing invalid parts"
  
  material_specificity:
    - "Replace generic placeholders with material-appropriate data"
    - "Use realistic technical specifications for the specific material"
    - "Ensure laser parameters are suitable for material type"
    - "Include relevant industrial applications and properties"
  
  validation_driven:
    - "Let validation error messages guide specific changes needed"
    - "Use example formats as the target for successful validation"
    - "Verify fixes resolve the exact errors reported"
    - "Ensure changes follow component prompt specifications"

bloat_prevention:
  strategic_principles:
    - "Reuse existing validators/examples and validators/templates"
    - "Make surgical edits rather than wholesale rewrites"
    - "Remove discovered placeholder content while fixing"
    - "Don't create new utilities when existing ones work"
    - "Focus on fixing specific validation failures, not general improvements"
