#!/usr/bin/env python3
"""
Automated path update script for frontmatter migration.
Generated by frontmatter migration tool.
"""

import re
from pathlib import Path

def update_file_paths():
    """Update file paths from old to new frontmatter structure"""
    
    updates = [
        # Path updates
        (r'content/components/frontmatter', 'frontmatter/materials'),
        (r'content\\components\\frontmatter', 'frontmatter/materials'),
        
        # Import updates for new frontmatter manager
        (r'from components\.frontmatter', 'from frontmatter.management'),
        
        # Variable name updates
        (r'frontmatter_dir = .*content/components/frontmatter.*', 
         'frontmatter_dir = Path("frontmatter/materials")'),
    ]
    
    files_to_update = [
        Path("run.py"),
        Path("generate_all_frontmatter.py"),
        Path("test_enhanced_frontmatter_generator.py"),
        Path("batch_generate_jsonld.py"),
        Path("generate_all_jsonld.py"),
        Path("tests/test_author_resolution.py"),
        Path("scripts/batch_caption_generation.py"),
        Path("scripts/batch_regenerate_all_captions.py"),
        Path("scripts/batch_tags_generation.py"),
        Path("tests/unit/test_material_loading.py"),
        Path("tests/integration/test_integration.py"),
        Path("tests/frontmatter/test_migration.py"),
        Path("tests/frontmatter/test_manager.py"),
        Path("tests/frontmatter/run_all_tests.py"),
        Path("tests/e2e/test_comprehensive_workflow_refactored.py"),
        Path("tests/e2e/test_file_io_validation.py"),
        Path("tests/e2e/test_component_specific.py"),
        Path("frontmatter/management/enhanced_generator.py"),
        Path("frontmatter/management/migrator.py"),
        Path("frontmatter/management/manager.py"),
        Path("utils/core/author_manager.py"),
        Path("scripts/tools/validate_frontmatter_ordering.py"),
        Path("scripts/tools/frontmatter_data_validation.py"),
        Path("scripts/tools/regenerate_all_frontmatter_validated.py"),
        Path("scripts/tools/update_frontmatter_fields.py"),
        Path("scripts/tools/fix_nested_yaml_properties.py"),
        Path("scripts/tools/validation_summary.py"),
        Path("scripts/tools/quick_generate_frontmatter.py"),
        Path("scripts/tools/generate_all_authors.py"),
        Path("scripts/tools/generate_all_jsonld.py"),
    ]
    
    for file_path in files_to_update:
        if file_path.exists():
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                original_content = content
                
                for old_pattern, new_pattern in updates:
                    content = re.sub(old_pattern, new_pattern, content)
                
                if content != original_content:
                    with open(file_path, 'w', encoding='utf-8') as f:
                        f.write(content)
                    print(f"‚úÖ Updated: {file_path}")
                else:
                    print(f"‚ÑπÔ∏è  No changes needed: {file_path}")
                    
            except Exception as e:
                print(f"‚ùå Error updating {file_path}: {e}")

if __name__ == "__main__":
    update_file_paths()
    print("\nüéâ Path updates completed!")
