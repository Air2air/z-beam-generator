# Validation Fix Instructions for Claude
# This document provides systematic instructions for analyzing and fixing validation failures
# CORE PRINCIPLES: Minimal changes, reuse existing code, avoid bloat, clean as you go

core_principles:
  effectiveness:
    - "Parse validation terminal output systematically to identify specific error patterns"
    - "Make targeted fixes that address root causes, not symptoms"
    - "Verify each fix by understanding what validation expects vs what exists"
    - "Use existing utilities and functions rather than creating new ones"
  
  bloat_prevention:
    - "Reuse existing validation utilities from components/base/utils/"
    - "Leverage existing formatting functions rather than duplicating logic"
    - "Make minimal, surgical changes - fix only what's broken"
    - "Remove temporary debugging code, comments, or placeholder content while fixing"
    - "Consolidate duplicate logic if encountered during fixes"
    - "Prefer modifying existing functions over creating new ones"
  
  cleanup_mindset:
    - "Clean up related issues found in the same file"
    - "Remove dead code, unused imports, or orphaned content discovered during fixes"
    - "Simplify overly complex structures while maintaining functionality"
    - "Ensure fixes follow existing code patterns and conventions"
    - "Document any non-obvious changes with brief inline comments"

analysis_protocol:
  step1: "Read terminal validation output to identify specific error types and failed components"
  step2: "Check current file contents to understand any manual changes made"
  step3: "Compare against schema requirements to identify missing or incorrect fields"
  step4: "Determine root cause category (schema_compliance, formatting_issues, or file_structure)"
  step5: "Select appropriate fix strategy based on error pattern"
  step6: "Look for cleanup opportunities while implementing fixes"

error_parsing_strategies:
  terminal_output_analysis:
    - "Look for component names in validation output: 'Failed: caption, jsonld, metatags'"
    - "Parse quality scores: 'quality: 50.0%' indicates content quality issues"
    - "Identify schema errors: 'Missing required field: name'"
    - "Find format issues: 'YAML syntax error', 'JSON parsing error'"
    - "Note file structure problems: 'File not found', 'Extension mismatch'"
  
  error_priority_mapping:
    critical: ["Missing required field", "File not found", "Schema validation failed"]
    high: ["YAML syntax error", "JSON parsing error", "Extension mismatch"]
    medium: ["quality: 20.0%", "quality: 50.0%", "Insufficient structure"]
    low: ["quality: 60.0%", "quality: 70.0%", "Minor formatting issues"]
  
  component_specific_diagnostics:
    caption: "Look for line count (should be exactly 2), technical specifications presence"
    jsonld: "Check for JSON vs YAML format, presence of headline/description/keywords"
    metatags: "Verify character limits (title: 50-60, description: 150-160)"
    propertiestable: "Look for TBD values, placeholder data, missing units"
    frontmatter: "Check for missing schema fields, placeholder values, proper YAML structure"

error_categories:
  schema_compliance:
    description: "Missing required fields or incorrect data structure"
    indicators:
      - "Missing required field: name"
      - "Missing required field: description"
      - "Missing required field: author"
      - "Frontmatter missing required fields"
    fixes:
      - "Map all required fields from schema validation section"
      - "Ensure all required fields have appropriate data types (string, array, object)"
      - "Populate author info from loaded author_data context"
      - "Add missing composition, compatibility, regulatoryStandards arrays"
      - "Include proper images object with alt and url fields"
  
  formatting_issues:
    description: "Syntax errors in YAML, JSON, or markdown"
    indicators:
      - "invalid (quality: 50.0%)"
      - "invalid (quality: 60.0%)"
      - "YAML syntax error"
      - "JSON parsing error"
      - "Insufficient meta tag structure"
      - "failed (quality: 20.0%)"
    fixes:
      - "Fix YAML syntax errors (indentation, quotes, colons)"
      - "Correct JSON structure and escaping"
      - "Ensure proper markdown table format with headers and separators"
      - "Add proper frontmatter delimiters (--- sections)"
      - "Remove markdown code block wrappers from content files"
      - "Fix file extensions (.json for JSON-LD, .md for others)"
  
  content_quality:
    description: "Generated content is incomplete, has placeholders, or lacks sufficient detail based on component-specific requirements"
    indicators:
      - "quality: 50.0%"
      - "quality: 60.0%"
      - "quality: 20.0%"
      - "TBD"
      - "placeholder"
      - "Insufficient meta tag structure found"
    component_requirements:
      caption:
        expected_format: "Exactly TWO lines - material description with contamination/surface analysis, then laser cleaning process parameters"
        required_elements:
          - "Material name with formula"
          - "Technical specifications: power, wavelength, pulse duration, spot size"
          - "Scientific terminology appropriate for technical documentation"
        example_structure: "[Material name with formula] microscopic surface analysis showing contaminants.\nAfter laser cleaning at [wavelength], [power], [pulse duration] and [spot size]."
      jsonld:
        expected_format: "Schema.org-compliant structured data in YAML format (NOT JSON)"
        required_elements:
          - "headline: descriptive headline"
          - "description: technical description"
          - "keywords: array of relevant terms"
          - "articleBody: comprehensive content"
        forbidden_formats:
          - "JSON format with {\"key\": \"value\"}"
          - "Code blocks with ```"
          - "Quoted keys like \"headline\""
      metatags:
        expected_format: "SEO-optimized meta tags with specific character limits"
        required_elements:
          - "meta_title: 50-60 characters, SEO-optimized"
          - "meta_description: 150-160 characters with technical details"
          - "meta_keywords: 10-15 relevant terms, comma-separated"
        focus_areas:
          - "Laser parameters and wavelengths"
          - "Material properties and composition"
          - "Industrial applications and benefits"
          - "Safety and precision aspects"
      propertiestable:
        expected_format: "Technical specifications table with comprehensive data"
        required_elements:
          - "Physical properties: density, melting point, thermal conductivity with exact values and units"
          - "Chemical properties: composition percentages, formulas, purity levels"
          - "Laser parameters: wavelengths in nm, power in watts, pulse durations in ns, fluence in J/cm²"
          - "Processing data: cleaning rates, temperature ranges, measured outcomes"
        prohibited_content:
          - "TBD values"
          - "Placeholder data"
          - "Generic or incomplete measurements"
      frontmatter:
        expected_format: "Comprehensive YAML with all required schema fields"
        required_elements:
          - "All schema-required fields populated"
          - "Real material data (no placeholders)"
          - "Specific numerical data with units"
          - "Technical accuracy and completeness"
        data_sources:
          - "Chemical formula from material_formula context"
          - "Chemical symbol from material_symbol context"
          - "Material type from material_type context"
          - "Author data from loaded author context"
    fixes:
      - "Replace TBD values with realistic material properties based on component requirements"
      - "Expand brief content to meet component-specific format requirements"
      - "Add missing elements required by each component's prompt specifications"
      - "Enhance content quality to match component-specific technical standards"
      - "Ensure content follows exact format requirements from component prompts"
      - "Remove placeholder contamination and use real material data only"
  
  file_structure:
    description: "Wrong file extensions or directory placement"
    indicators:
      - "File not found"
      - "Extension mismatch"
      - "Directory structure issue"
      - "wrapped in ```markdown"
    fixes:
      - "Verify correct file extensions (.json for jsonld, .md for others)"
      - "Check component directory placement matches BATCH_CONFIG"
      - "Validate filename patterns match article_type_patterns"
      - "Remove markdown code block wrappers from component files"
      - "Ensure raw content format without language tags"

fix_strategies:
  frontmatter_schema_fix:
    priority: 1
    description: "Fix missing required schema fields in frontmatter based on component prompt requirements"
    required_fields:
      - "name: Subject name as string"
      - "description: Technical description of material"
      - "author: Author name from author_data context"
      - "keywords: Array of relevant keywords"
      - "category: Material category (metal, ceramic, etc.)"
      - "chemicalProperties: Object with symbol, formula, materialType"
      - "properties: Object with density, meltingPoint, thermalConductivity, etc."
      - "composition: Array of component objects"
      - "compatibility: Array of compatible material objects"
      - "regulatoryStandards: Array of regulation objects"
      - "images: Object with hero and closeup image data"
    data_requirements:
      - "Physical properties: density, melting point, thermal conductivity with exact values and units"
      - "Chemical properties: composition percentages, chemical formulas, molecular structure, purity levels"
      - "Laser parameters: optimal wavelengths in nanometers, power ranges in watts, pulse durations in nanoseconds, fluence values in J/cm²"
      - "Processing data: cleaning rates, temperature ranges, optimal settings, measured outcomes"
      - "Applications: specific industrial uses, equipment types, processing conditions, success metrics"
      - "Compatibility: substrate materials, coating types, environmental conditions"
      - "Safety data: emission levels, ventilation requirements, protective equipment specifications"
      - "Standards: relevant industry standards, regulatory requirements, certification details"
    
  content_quality_fix:
    priority: 1
    description: "Fix content quality issues based on component-specific prompt requirements"
    component_fixes:
      caption:
        action: "Ensure exactly two lines with technical specifications"
        requirements:
          - "Line 1: Material description with contamination/surface analysis details"
          - "Line 2: Laser cleaning process parameters and results"
          - "Include: power, wavelength, pulse duration, spot size"
          - "Use scientific terminology for technical documentation"
        format_check: "Verify two-line structure with technical accuracy"
      jsonld:
        action: "Fix YAML format and required structured data fields"
        requirements:
          - "Output in YAML format (never JSON)"
          - "Include: headline, description, keywords array, articleBody"
          - "Ensure Schema.org compliance"
          - "Remove any JSON formatting or code blocks"
        format_check: "Verify YAML structure without JSON syntax"
      metatags:
        action: "Fix SEO meta tag structure and character limits"
        requirements:
          - "meta_title: 50-60 characters, SEO-optimized"
          - "meta_description: 150-160 characters with technical details"
          - "meta_keywords: 10-15 relevant terms, comma-separated"
          - "Focus on laser parameters, material properties, applications"
        format_check: "Verify character limits and technical focus"
      propertiestable:
        action: "Replace TBD values with comprehensive technical data"
        requirements:
          - "Physical properties with exact values and units"
          - "Chemical properties with composition percentages"
          - "Laser parameters with specific measurements"
          - "Processing data with quantifiable results"
          - "No TBD or placeholder values allowed"
        format_check: "Verify all values are specific and measurable"
  
  yaml_syntax_fix:
    priority: 2
    description: "Fix YAML formatting issues"
    checks:
      - "Proper indentation (2 spaces per level)"
      - "Correct colon spacing (key: value)"
      - "Quote strings with special characters"
      - "Array syntax with proper dashes"
      - "Object nesting structure"
    
  file_extension_fix:
    priority: 2
    description: "Fix incorrect file extensions and remove code block wrappers"
    actions:
      - "Rename .md files to .json for JSON-LD components"
      - "Remove ```markdown, ```yaml, ```json code block wrappers"
      - "Ensure raw content format without language tags"
      - "Verify file extensions match component expectations"
    
  json_structure_fix:
    priority: 2
    description: "Fix JSON-LD and metatags structure based on prompt requirements"
    requirements:
      - "Valid JSON syntax with proper escaping (for actual JSON files)"
      - "YAML format for JSON-LD components (per prompt requirements)"
      - "Required @context and @type for JSON-LD when in JSON format"
      - "Proper meta tag fields for SEO"
      - "Correct data types for all fields"

safety_constraints:
  allowed_changes:
    - "File formatting and syntax corrections using existing utilities"
    - "Schema field compliance additions with real data"
    - "Data structure alignment with schema using established patterns"
    - "File extension corrections and code block wrapper removal"
    - "Content structure organization following component specifications"
    - "Cleanup of dead code, unused imports, or orphaned content found during fixes"
    - "Consolidation of duplicate logic discovered while fixing"
    - "Removal of placeholder content, TBD values, or debugging artifacts"
  
  forbidden_changes:
    - "Prompt templates (*.yaml files in component directories like components/*/prompt.yaml)"
    - "BATCH_CONFIG modifications in run.py"
    - "Schema definitions in schemas/*.json"
    - "Technical content meaning or factual data (only fix format/structure)"
    - "Generation algorithms or AI instructions"
    - "Author data or system configuration"
    - "Creating new utility functions when existing ones can be reused"
    - "Over-engineering solutions or adding unnecessary complexity"

bloat_prevention_guidelines:
  reuse_existing_code:
    - "Use components/base/utils/* for formatting, validation, and content processing"
    - "Leverage existing TableFormatter, ContentFormatter, JsonldFormatter classes"
    - "Reuse validation functions from components/base/utils/validation.py"
    - "Use established slug_utils, bullet_formatter, and other utilities"
  
  minimal_changes:
    - "Fix only the specific validation error, avoid scope creep"
    - "Preserve existing working code structure and patterns"
    - "Don't refactor working code unless it directly relates to the fix"
    - "Make targeted edits rather than wholesale rewrites"
  
  cleanup_opportunities:
    - "Remove markdown code block wrappers found in component files"
    - "Delete placeholder content like 'TBD', '{...}', or 'TODO' entries"
    - "Clean up formatting inconsistencies in the same file being fixed"
    - "Remove unused imports or dead code discovered during fixes"
    - "Consolidate duplicate content or logic patterns if found"

execution_workflow:
  phase1_analysis:
    - "Read validation terminal output for specific error messages and component names"
    - "Parse error patterns to identify: missing fields, syntax errors, quality scores, format issues"
    - "Inspect current file contents to understand existing structure and identify manual changes"
    - "Compare against schema requirements and component prompt specifications"
    - "Identify missing schema fields vs format issues vs content quality problems"
    - "Categorize errors by type (schema/format/structure) and urgency"
    - "Look for opportunities to clean up related issues in the same files"
  
  phase2_planning:
    - "Select fix strategy based on error category and component requirements"
    - "Prioritize schema compliance over formatting, formatting over content quality"
    - "Plan minimal changes that address root cause without over-engineering"
    - "Identify existing utilities that can be reused rather than creating new functions"
    - "Plan to remove any bloat, dead code, or cleanup opportunities discovered"
  
  phase3_execution:
    - "Apply fixes in priority order using existing validation utilities where possible"
    - "Make surgical changes - modify only what's necessary to fix the specific error"
    - "Verify each change maintains valid syntax and follows existing patterns"
    - "Preserve existing valid content and structure"
    - "Add missing required fields with appropriate data from available context"
    - "Remove any discovered bloat, unused code, or cleanup opportunities"
    - "Consolidate duplicate logic if found during the fix process"
  
  phase4_validation:
    - "Verify fixes address the specific validation errors mentioned in terminal output"
    - "Ensure changes follow component-specific format requirements exactly"
    - "Check that no new issues were introduced by the changes"
    - "Confirm fixes are minimal and don't add unnecessary complexity"
    - "Report success/failure status with specific details about what was changed"

common_fixes:
  missing_frontmatter_fields:
    action: "Add all required schema fields with appropriate values from component prompt specifications"
    template: |
      name: "{subject}"
      description: "Technical overview of {subject} for laser cleaning applications"
      author: "{author_name}"
      keywords: ["{subject.lower()}", "laser-cleaning", "{category}"]
      category: "{category}"
      chemicalProperties:
        symbol: "{chemical_symbol_from_context}"
        formula: "{chemical_formula_from_context}"
        materialType: "{material_type_from_context}"
      properties:
        density: "{specific_value} g/cm³"
        meltingPoint: "{specific_value}°C"
        thermalConductivity: "{specific_value} W/m·K"
      composition: []
      compatibility: []
      regulatoryStandards: []
      images:
        hero:
          alt: "{subject} surface during laser cleaning process"
          url: "/images/{subject-slug}-laser-cleaning-hero.jpg"
        closeup:
          alt: "Microscopic view of {subject} after laser treatment"
          url: "/images/{subject-slug}-laser-cleaning-closeup.jpg"

  caption_quality_fix:
    action: "Fix caption format to match component prompt requirements exactly"
    requirements:
      - "Exactly TWO lines as specified in caption prompt"
      - "Line 1: Material description with contamination/surface analysis details"
      - "Line 2: Laser cleaning process parameters and results"
      - "Include technical specifications: power, wavelength, pulse duration, spot size"
      - "Use scientific terminology appropriate for technical documentation"
    template: |
      {Material name with formula} microscopic surface analysis showing contaminants.
      After laser cleaning at {wavelength}, {power}, {pulse duration} and {spot size}.

  jsonld_format_fix:
    action: "Fix JSON-LD format to match component prompt requirements (YAML, not JSON)"
    requirements:
      - "Output in YAML format as specified in prompt"
      - "Never use JSON format with curly braces"
      - "Never use code blocks"
      - "Never quote keys"
    template: |
      headline: {descriptive_headline}
      description: {technical_description}
      keywords:
      - {keyword1}
      - {keyword2}
      articleBody: {comprehensive_content}

  metatags_structure_fix:
    action: "Fix meta tags structure based on component prompt requirements"
    requirements:
      - "meta_title: 50-60 characters, SEO-optimized"
      - "meta_description: 150-160 characters with technical details"
      - "meta_keywords: 10-15 relevant terms, comma-separated"
      - "Focus on laser parameters, material properties, applications, safety"
    template: |
      meta_title: {optimized_title_50_60_chars}
      meta_description: {compelling_description_150_160_chars}
      meta_keywords: {keyword1}, {keyword2}, {keyword3}, etc

  propertiestable_content_fix:
    action: "Replace TBD/placeholder values with comprehensive technical data from prompt requirements"
    requirements:
      - "Physical properties: density, melting point, thermal conductivity with exact values and units"
      - "Chemical properties: composition percentages, chemical formulas, molecular structure, purity levels"
      - "Laser parameters: optimal wavelengths in nanometers, power ranges in watts, pulse durations in nanoseconds, fluence values in J/cm²"
      - "Processing data: cleaning rates, temperature ranges, optimal settings, measured outcomes"
      - "Applications: specific industrial uses, equipment types, processing conditions, success metrics"
      - "No TBD values, placeholders, or generic data allowed"
    
  markdown_code_block_removal:
    action: "Remove markdown code block wrappers that violate component format requirements"
    patterns_to_remove:
      - "```markdown at start of file"
      - "``` at end of file"
      - "```yaml, ```json, ```text wrappers"
      - "Any language-specific code block markers"
    note: "Components expect raw content, not markdown-wrapped content"

  file_extension_correction:
    action: "Fix file extensions based on component expectations"
    corrections:
      - "JSON-LD components: should be .json files (if actual JSON) or .md files (if YAML as per prompt)"
      - "Verify component directory expectations match actual file extensions"
      - "Ensure validation system expectations align with component output format"
  
  yaml_syntax_errors:
    action: "Fix indentation, spacing, and quote issues based on YAML standards"
    common_issues:
      - "Use 2-space indentation consistently"
      - "Add space after colons (key: value not key:value)"
      - "Quote strings with special characters or spaces"
      - "Use proper array syntax with - prefix"
      - "Ensure proper object nesting structure"

reporting:
  success_message: "✅ Fixed {component} - resolved {error_type} issues"
  failure_message: "❌ {component} - could not resolve {error_type}: {error_details}"
  summary_format: "Fixed {success_count}/{total_count} components successfully"
